var threeSum = function(nums) {
    
    var result = new Array();
    nums = nums.sort((a , b) => a - b);
    
    for(let i = 0 ; i < nums.length - 2 ; i++){
  
        if(nums[i] === nums[i - 1]) continue;
        
        let target = -nums[i];
        let left = i + 1 ;
        let right = nums.length - 1;
        
        while(left < right){
            if(nums[left] + nums[right] === target){
                result.push([nums[i], nums[left] , nums[right]]);
                if(nums[left] === nums[left + 1]){
                    left ++;
                }
                
                if(nums[right] == nums[right - 1]){
                   right --;
                }
            }
            else if(nums[left] + nums[right] > target){
                right --;
            }
            else{
                left++;
            } 
        }
    }
        return result; 
};

这些个循环最后导致我严重超时，我改改


var threeSum = function(nums) {
    
    var answer = [];
    if(nums.length < 3) return answer;
  
    nums = nums.sort((a , b) => (a - b));
    
       for(let i=0; i<nums.length-2; i++){
           var a = nums[i];
           if(nums[i - 1] != undefined && nums[i] === nums[i - 1]) continue;
           
           let left = i + 1;
           let right = nums.length - 1;
           
          while(left < right){
              var b = nums[left];
              var c = nums[right];
              var sum = a + b + c;
              
              if(sum == 0){
                  answer.push([a , b , c]);
              while(nums[left] == nums[left + 1]){
                  left ++;
                 }
              while(nums[right] == nums[right - 1]){
                  right --;
                 }
              
                  left ++;
                  right --;
            }else if(sum > 0){
                  right --;
              }else{
                  left ++;
              }   
          }
        }
        return answer; 
};


这个是借鉴了别人写的，没有像之前写的那个是个炒鸡鸡肋又超时的办法








