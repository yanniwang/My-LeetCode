/**
 * @param {number} n
 * @return {string[]}
 */
var generateParenthesis = function(n) {
    var result = [];
    
    function generate(l,r,s)
    {
        if(l == n && r == n)
        {
            result.push(s);
            return;
        }
        if(l < n)
        {
            generate(l + 1, r,s+'(');
        }
        if(l > r)
        {
            generate(l,r + 1,s+')');
        }
}
    generate(0 , 0 ,'');
    return result;
};
这个题emmmm.....我不会，我之前借鉴了一个其他的但是老出错，我把通过的答案搁在这里，下次我自己写一下看看
我再去试试上一个将递归函数放在外面的可不可以通过


/**
 * @param {number} n
 * @return {string[]}
 */
var generateParenthesis = function(n) {
    var result = [];
    
    function generate(l,r,s)
    {
        if(l==0 && r==0)
        {
            result.push(s);
            return;
        }
        if(l > 0)
        {
            generate(l-1,r,s+'(');
        }
        if(l>0 && l<r)
        {
            generate(l,r-1,s+')');
        }
}
    generate('' , n /2 , n/2);
    return result;
};

这是在我找的另一个类似于上面的那个方法
只是l和r分别代表的是剩余左括号和剩余右括号，我觉得和上面的那个没啥两样，但是运行的结果就是啥也没有，空的，难受😫
